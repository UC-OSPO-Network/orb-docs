"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[1821],{6378:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/setup","title":"Development Setup","description":"This guide provides detailed instructions for setting up a complete development environment for UC ORB Showcase, including all dependencies, tools, and configurations needed for effective development.","source":"@site/docs/development/setup.md","sourceDirName":"development","slug":"/development/setup","permalink":"/orb-docs/docs/development/setup","draft":false,"unlisted":false,"editUrl":"https://github.com/UC-OSPO-Network/orb-showcase/tree/main/doc/docs/development/setup.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1}}');var o=s(4848),r=s(8453);const i={sidebar_position:1},l="Development Setup",a={},d=[{value:"System Requirements",id:"system-requirements",level:2},{value:"Hardware Requirements",id:"hardware-requirements",level:3},{value:"Operating System Support",id:"operating-system-support",level:3},{value:"Core Dependencies",id:"core-dependencies",level:2},{value:"1. Node.js and npm",id:"1-nodejs-and-npm",level:3},{value:"2. Python 3.9+",id:"2-python-39",level:3},{value:"3. PostgreSQL 15+",id:"3-postgresql-15",level:3},{value:"4. Git",id:"4-git",level:3},{value:"Development Tools",id:"development-tools",level:2},{value:"1. Code Editor (VS Code Recommended)",id:"1-code-editor-vs-code-recommended",level:3},{value:"2. Database Management Tools",id:"2-database-management-tools",level:3},{value:"Project Setup",id:"project-setup",level:2},{value:"1. Clone Repository",id:"1-clone-repository",level:3},{value:"2. Backend Setup",id:"2-backend-setup",level:3},{value:"3. Database Setup",id:"3-database-setup",level:3},{value:"4. Frontend Setup",id:"4-frontend-setup",level:3},{value:"Development Workflow",id:"development-workflow",level:2},{value:"1. Start Development Servers",id:"1-start-development-servers",level:3},{value:"2. Verify Setup",id:"2-verify-setup",level:3},{value:"3. Development Commands",id:"3-development-commands",level:3},{value:"IDE Configuration",id:"ide-configuration",level:2},{value:"VS Code Settings",id:"vs-code-settings",level:3},{value:"VS Code Tasks",id:"vs-code-tasks",level:3},{value:"Environment Validation",id:"environment-validation",level:2},{value:"Validation Script",id:"validation-script",level:3},{value:"Troubleshooting Setup Issues",id:"troubleshooting-setup-issues",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Getting Help",id:"getting-help",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"development-setup",children:"Development Setup"})}),"\n",(0,o.jsx)(n.p,{children:"This guide provides detailed instructions for setting up a complete development environment for UC ORB Showcase, including all dependencies, tools, and configurations needed for effective development."}),"\n",(0,o.jsx)(n.h2,{id:"system-requirements",children:"System Requirements"}),"\n",(0,o.jsx)(n.h3,{id:"hardware-requirements",children:"Hardware Requirements"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"RAM"}),": Minimum 8GB, recommended 16GB+"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Storage"}),": At least 5GB free space for dependencies and data"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CPU"}),": Modern multi-core processor (development servers can be resource-intensive)"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"operating-system-support",children:"Operating System Support"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"macOS"}),": 10.15+ (Catalina or later)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Linux"}),": Ubuntu 18.04+, CentOS 7+, or equivalent"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Windows"}),": Windows 10+ with WSL2 recommended"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"core-dependencies",children:"Core Dependencies"}),"\n",(0,o.jsx)(n.h3,{id:"1-nodejs-and-npm",children:"1. Node.js and npm"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Installation:"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"macOS (using Homebrew):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Install Homebrew if not already installed\n/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n# Install Node.js (includes npm)\nbrew install node@18\n\n# Verify installation\nnode --version  # Should show v18.x.x or later\nnpm --version   # Should show 9.x.x or later\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Linux (Ubuntu/Debian):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Update package index\nsudo apt update\n\n# Install Node.js 18.x\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Verify installation\nnode --version\nnpm --version\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Windows:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Download and install from nodejs.org\n# Or use Chocolatey\nchoco install nodejs\n\n# Or use winget\nwinget install OpenJS.NodeJS\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Alternative: Using Node Version Manager (nvm)"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Install nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n# Restart terminal or source profile\nsource ~/.bashrc\n\n# Install and use Node.js 18\nnvm install 18\nnvm use 18\nnvm alias default 18\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-python-39",children:"2. Python 3.9+"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"macOS:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Using Homebrew\nbrew install python@3.11\n\n# Verify installation\npython3 --version  # Should show 3.9+ or later\npip3 --version\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Linux (Ubuntu/Debian):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Update package index\nsudo apt update\n\n# Install Python 3.11\nsudo apt install python3.11 python3.11-venv python3.11-pip\n\n# Create symlinks (optional)\nsudo ln -sf /usr/bin/python3.11 /usr/bin/python3\nsudo ln -sf /usr/bin/pip3 /usr/bin/pip\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Windows:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Download from python.org\n# Or use Chocolatey\nchoco install python\n\n# Or use winget\nwinget install Python.Python.3.11\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-postgresql-15",children:"3. PostgreSQL 15+"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"macOS:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Using Homebrew\nbrew install postgresql@15\n\n# Start PostgreSQL service\nbrew services start postgresql@15\n\n# Create database user (optional)\ncreateuser -s postgres\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Linux (Ubuntu/Debian):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Add PostgreSQL official repository\nsudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\nsudo apt update\n\n# Install PostgreSQL 15\nsudo apt install postgresql-15 postgresql-client-15\n\n# Start PostgreSQL service\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Docker Alternative (Recommended for Development):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Install Docker Desktop from docker.com\n# Or use package manager\n\n# macOS\nbrew install --cask docker\n\n# Linux (Ubuntu)\nsudo apt install docker.io docker-compose\n\n# Start PostgreSQL container\ndocker run -d \\\n  --name orb-db \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=orb \\\n  -e POSTGRES_DB=sample \\\n  -p 5432:5432 \\\n  postgres:15\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-git",children:"4. Git"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"macOS:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Usually pre-installed, or via Xcode Command Line Tools\nxcode-select --install\n\n# Or via Homebrew\nbrew install git\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Linux:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Ubuntu/Debian\nsudo apt install git\n\n# CentOS/RHEL\nsudo yum install git\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Windows:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Download from git-scm.com\n# Or use Chocolatey\nchoco install git\n\n# Or use winget\nwinget install Git.Git\n"})}),"\n",(0,o.jsx)(n.h2,{id:"development-tools",children:"Development Tools"}),"\n",(0,o.jsx)(n.h3,{id:"1-code-editor-vs-code-recommended",children:"1. Code Editor (VS Code Recommended)"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Installation:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# macOS\nbrew install --cask visual-studio-code\n\n# Linux (Ubuntu/Debian)\nwget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg\nsudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/\nsudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" > /etc/apt/sources.list.d/vscode.list'\nsudo apt update\nsudo apt install code\n\n# Windows\nwinget install Microsoft.VisualStudioCode\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Recommended VS Code Extensions:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Install via VS Code Extensions panel or command line\ncode --install-extension ms-python.python\ncode --install-extension bradlc.vscode-tailwindcss\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension ms-vscode.vscode-typescript-next\ncode --install-extension ms-vscode.vscode-json\ncode --install-extension ckolkman.vscode-postgres\ncode --install-extension ms-vscode.vscode-eslint\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-database-management-tools",children:"2. Database Management Tools"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"pgAdmin (GUI):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# macOS\nbrew install --cask pgadmin4\n\n# Linux\nsudo apt install pgadmin4\n\n# Windows\nwinget install PostgreSQL.pgAdmin\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"psql (Command Line):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Usually installed with PostgreSQL\n# Test connection\npsql postgresql://postgres:orb@localhost:5432/sample\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"VS Code PostgreSQL Extension:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Install PostgreSQL extension for VS Code\ncode --install-extension ckolkman.vscode-postgres\n"})}),"\n",(0,o.jsx)(n.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,o.jsx)(n.h3,{id:"1-clone-repository",children:"1. Clone Repository"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Clone your fork\ngit clone https://github.com/YOUR-USERNAME/orb-showcase.git\ncd orb-showcase\n\n# Add upstream remote\ngit remote add upstream https://github.com/UC-OSPO-Network/orb-showcase.git\n\n# Verify remotes\ngit remote -v\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-backend-setup",children:"2. Backend Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Navigate to backend directory\ncd backend\n\n# Create virtual environment\npython3 -m venv .venv\n\n# Activate virtual environment\n# macOS/Linux:\nsource .venv/bin/activate\n# Windows:\n.venv\\Scripts\\activate\n\n# Upgrade pip\npip install --upgrade pip\n\n# Install dependencies\npip install -r requirements.txt\n\n# Create environment file\ncp .env.example .env\n\n# Edit .env file with your settings\nnano .env  # or use your preferred editor\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Backend Environment Configuration (.env):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Database Configuration\nPOSTGRES_DB_URL=postgresql://postgres:orb@localhost:5432/sample\n\n# Optional: GitHub API token for enhanced rate limits\nGITHUB_TOKEN=your_github_token_here\n\n# Development settings\nDEBUG=true\nLOG_LEVEL=debug\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-database-setup",children:"3. Database Setup"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Option A: Docker (Recommended)"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Start PostgreSQL container\ndocker run -d \\\n  --name orb-db \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=orb \\\n  -e POSTGRES_DB=sample \\\n  -p 5432:5432 \\\n  postgres:15\n\n# Wait for container to start\nsleep 10\n\n# Test connection\ndocker exec orb-db psql -U postgres -d sample -c "SELECT version();"\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Option B: Local PostgreSQL"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Create database\ncreatedb sample\n\n# Create user (if needed)\ncreateuser -s postgres\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Load Sample Data:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# If sample data exists\ncat db/sample.sql | docker exec -i orb-db psql -U postgres -d sample\n\n# Or create minimal schema for development\ndocker exec -i orb-db psql -U postgres -d sample << EOF\nCREATE TABLE IF NOT EXISTS repositories (\n    full_name VARCHAR PRIMARY KEY,\n    description TEXT,\n    university VARCHAR,\n    license VARCHAR,\n    owner VARCHAR,\n    organization VARCHAR,\n    language VARCHAR,\n    stargazers_count VARCHAR,\n    html_url VARCHAR,\n    forks_count VARCHAR,\n    subscribers_count VARCHAR,\n    created_at TIMESTAMP,\n    readme TEXT,\n    homepage VARCHAR,\n    default_branch VARCHAR,\n    approved BOOLEAN DEFAULT true,\n    topic_area_ai VARCHAR\n);\n\nCREATE VIEW showcase_view AS SELECT * FROM repositories;\n\nINSERT INTO repositories (full_name, description, university, language, approved) VALUES\n('uc-berkeley/example-repo', 'Example repository for testing', 'UC Berkeley', 'Python', true),\n('ucla/sample-project', 'Sample project from UCLA', 'UCLA', 'JavaScript', true),\n('ucsd/research-tool', 'Research tool from UC San Diego', 'UC San Diego', 'R', true);\nEOF\n"})}),"\n",(0,o.jsx)(n.h3,{id:"4-frontend-setup",children:"4. Frontend Setup"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Navigate to frontend directory\ncd ../frontend\n\n# Install dependencies\nnpm install\n\n# Create environment file\ncp .env.example .env.local\n\n# Edit environment file\nnano .env.local\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Frontend Environment Configuration (.env.local):"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# API Configuration\nNEXT_PUBLIC_API_URL=http://localhost:8000\n\n# Optional: Analytics or other services\n# NEXT_PUBLIC_ANALYTICS_ID=your_analytics_id\n"})}),"\n",(0,o.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,o.jsx)(n.h3,{id:"1-start-development-servers",children:"1. Start Development Servers"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Terminal 1 - Backend:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd backend\nsource .venv/bin/activate  # Activate virtual environment\nuvicorn main:app --reload --host 0.0.0.0 --port 8000\n\n# Should show:\n# INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)\n# INFO:     Started reloader process\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Terminal 2 - Frontend:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd frontend\nnpm run dev\n\n# Should show:\n# \u25b2 Next.js 15.x.x\n# - Local:        http://localhost:3000\n# - Network:      http://192.168.x.x:3000\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-verify-setup",children:"2. Verify Setup"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Test Backend:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Test API endpoints\ncurl http://localhost:8000/repositories\ncurl http://localhost:8000/universities\ncurl http://localhost:8000/languages\n\n# Check API documentation\nopen http://localhost:8000/docs\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Test Frontend:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Visit frontend\nopen http://localhost:3000\n\n# Test pages:\n# - Home page should load\n# - Repositories page should show data\n# - Search and filtering should work\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-development-commands",children:"3. Development Commands"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Backend Commands:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Start development server\nuvicorn main:app --reload\n\n# Run with debug logging\nuvicorn main:app --reload --log-level debug\n\n# Check code style\nblack .\nisort .\n\n# Type checking (if mypy is installed)\nmypy main.py models.py\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Frontend Commands:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n\n# Lint code\nnpm run lint\n\n# Fix linting issues\nnpm run lint:fix\n\n# Type checking\nnpx tsc --noEmit\n"})}),"\n",(0,o.jsx)(n.h2,{id:"ide-configuration",children:"IDE Configuration"}),"\n",(0,o.jsx)(n.h3,{id:"vs-code-settings",children:"VS Code Settings"}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:".vscode/settings.json"})," in project root:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "python.defaultInterpreterPath": "./backend/.venv/bin/python",\n  "python.terminal.activateEnvironment": true,\n  "typescript.preferences.importModuleSpecifier": "relative",\n  "editor.formatOnSave": true,\n  "editor.codeActionsOnSave": {\n    "source.fixAll.eslint": true,\n    "source.organizeImports": true\n  },\n  "tailwindCSS.includeLanguages": {\n    "typescript": "javascript",\n    "typescriptreact": "javascript"\n  },\n  "files.associations": {\n    "*.css": "tailwindcss"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"vs-code-tasks",children:"VS Code Tasks"}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:".vscode/tasks.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "version": "2.0.0",\n  "tasks": [\n    {\n      "label": "Start Backend",\n      "type": "shell",\n      "command": "cd backend && source .venv/bin/activate && uvicorn main:app --reload",\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "new"\n      }\n    },\n    {\n      "label": "Start Frontend",\n      "type": "shell",\n      "command": "cd frontend && npm run dev",\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "new"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"environment-validation",children:"Environment Validation"}),"\n",(0,o.jsx)(n.h3,{id:"validation-script",children:"Validation Script"}),"\n",(0,o.jsx)(n.p,{children:"Create a validation script to check your setup:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Create validation script\ncat > validate-setup.sh << \'EOF\'\n#!/bin/bash\n\necho "\ud83d\udd0d Validating UC ORB Showcase Development Setup..."\n\n# Check Node.js\nif command -v node &> /dev/null; then\n    NODE_VERSION=$(node --version)\n    echo "\u2705 Node.js: $NODE_VERSION"\nelse\n    echo "\u274c Node.js not found"\n    exit 1\nfi\n\n# Check Python\nif command -v python3 &> /dev/null; then\n    PYTHON_VERSION=$(python3 --version)\n    echo "\u2705 Python: $PYTHON_VERSION"\nelse\n    echo "\u274c Python3 not found"\n    exit 1\nfi\n\n# Check PostgreSQL (Docker)\nif docker ps | grep -q orb-db; then\n    echo "\u2705 PostgreSQL: Running in Docker"\nelif command -v psql &> /dev/null; then\n    echo "\u2705 PostgreSQL: Local installation"\nelse\n    echo "\u274c PostgreSQL not found"\n    exit 1\nfi\n\n# Check Git\nif command -v git &> /dev/null; then\n    GIT_VERSION=$(git --version)\n    echo "\u2705 Git: $GIT_VERSION"\nelse\n    echo "\u274c Git not found"\n    exit 1\nfi\n\n# Check backend dependencies\nif [ -f "backend/.venv/bin/python" ]; then\n    echo "\u2705 Backend: Virtual environment exists"\n    if backend/.venv/bin/python -c "import fastapi" 2>/dev/null; then\n        echo "\u2705 Backend: Dependencies installed"\n    else\n        echo "\u274c Backend: Dependencies missing"\n        exit 1\n    fi\nelse\n    echo "\u274c Backend: Virtual environment not found"\n    exit 1\nfi\n\n# Check frontend dependencies\nif [ -d "frontend/node_modules" ]; then\n    echo "\u2705 Frontend: Dependencies installed"\nelse\n    echo "\u274c Frontend: Dependencies missing"\n    exit 1\nfi\n\n# Test database connection\nif docker exec orb-db psql -U postgres -d sample -c "SELECT 1;" &> /dev/null; then\n    echo "\u2705 Database: Connection successful"\nelse\n    echo "\u274c Database: Connection failed"\n    exit 1\nfi\n\necho "\ud83c\udf89 Setup validation complete! You\'re ready to develop."\nEOF\n\nchmod +x validate-setup.sh\n./validate-setup.sh\n'})}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting-setup-issues",children:"Troubleshooting Setup Issues"}),"\n",(0,o.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Port Conflicts"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Check what's using ports 3000 and 8000\nlsof -i :3000\nlsof -i :8000\n\n# Kill processes if needed\nkill -9 $(lsof -t -i:3000)\nkill -9 $(lsof -t -i:8000)\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Permission Issues"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Fix npm permissions (macOS/Linux)\nsudo chown -R $(whoami) ~/.npm\n\n# Fix Python permissions\nsudo chown -R $(whoami) backend/.venv\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Docker Issues"})}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Restart Docker service\nsudo systemctl restart docker  # Linux\n# Or restart Docker Desktop\n\n# Remove and recreate container\ndocker rm -f orb-db\ndocker run -d --name orb-db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=orb -e POSTGRES_DB=sample -p 5432:5432 postgres:15\n"})}),"\n",(0,o.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,o.jsx)(n.p,{children:"If you encounter issues:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Check the ",(0,o.jsx)(n.a,{href:"../troubleshooting",children:"Troubleshooting Guide"})]}),"\n",(0,o.jsx)(n.li,{children:"Search existing GitHub issues"}),"\n",(0,o.jsx)(n.li,{children:"Create a new issue with detailed error messages"}),"\n",(0,o.jsx)(n.li,{children:"Ask in GitHub Discussions"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Your development environment is now ready! Continue to the ",(0,o.jsx)(n.a,{href:"../getting-started",children:"Getting Started"})," guide to learn about the development process."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var t=s(6540);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);