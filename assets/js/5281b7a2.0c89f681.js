"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[2443],{936:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"architecture","title":"Architecture Overview","description":"UC ORB Showcase follows a modern full-stack architecture with clear separation of concerns, type safety, and performance optimization. This document provides a comprehensive overview of the system design and technical decisions.","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/orb-docs/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/UC-OSPO-Network/orb-showcase/tree/main/doc/docs/architecture.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"UC ORB Showcase Documentation","permalink":"/orb-docs/docs/intro"},"next":{"title":"Getting Started","permalink":"/orb-docs/docs/getting-started"}}');var r=i(4848),s=i(8453);const a={sidebar_position:2},l="Architecture Overview",o={},c=[{value:"System Architecture",id:"system-architecture",level:2},{value:"Frontend Architecture",id:"frontend-architecture",level:2},{value:"Next.js 15 with App Router",id:"nextjs-15-with-app-router",level:3},{value:"Component Architecture",id:"component-architecture",level:3},{value:"Page Components",id:"page-components",level:4},{value:"UI Components",id:"ui-components",level:4},{value:"State Management",id:"state-management",level:4},{value:"Data Flow Pattern",id:"data-flow-pattern",level:3},{value:"Backend Architecture",id:"backend-architecture",level:2},{value:"FastAPI Service Design",id:"fastapi-service-design",level:3},{value:"API Design Principles",id:"api-design-principles",level:3},{value:"RESTful Endpoints",id:"restful-endpoints",level:4},{value:"Data Models",id:"data-models",level:4},{value:"Database Integration",id:"database-integration",level:3},{value:"PostgreSQL with SQLModel",id:"postgresql-with-sqlmodel",level:4},{value:"Query Optimization",id:"query-optimization",level:4},{value:"Data Architecture",id:"data-architecture",level:2},{value:"Database Schema",id:"database-schema",level:3},{value:"Data Flow",id:"data-flow",level:3},{value:"Performance Architecture",id:"performance-architecture",level:2},{value:"Frontend Performance",id:"frontend-performance",level:3},{value:"Client-Side Optimization",id:"client-side-optimization",level:4},{value:"Caching Strategy",id:"caching-strategy",level:4},{value:"State Management Optimization",id:"state-management-optimization",level:4},{value:"Backend Performance",id:"backend-performance",level:3},{value:"Database Optimization",id:"database-optimization",level:4},{value:"API Performance",id:"api-performance",level:4},{value:"Security Architecture",id:"security-architecture",level:2},{value:"Frontend Security",id:"frontend-security",level:3},{value:"Backend Security",id:"backend-security",level:3},{value:"Data Security",id:"data-security",level:3},{value:"Scalability Architecture",id:"scalability-architecture",level:2},{value:"Horizontal Scaling",id:"horizontal-scaling",level:3},{value:"Vertical Scaling",id:"vertical-scaling",level:3},{value:"Development Architecture",id:"development-architecture",level:2},{value:"Type Safety",id:"type-safety",level:3},{value:"Development Workflow",id:"development-workflow",level:3},{value:"Deployment Architecture",id:"deployment-architecture",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,r.jsx)(n.p,{children:"UC ORB Showcase follows a modern full-stack architecture with clear separation of concerns, type safety, and performance optimization. This document provides a comprehensive overview of the system design and technical decisions."}),"\n",(0,r.jsx)(n.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client Layer"\n        A[Web Browser]\n        B[Mobile Browser]\n    end\n    \n    subgraph "Frontend - Next.js 15"\n        C[App Router Pages]\n        D[React 19 Components]\n        E[Zustand Store]\n        F[TanStack Query]\n        G[Tailwind CSS + Shadcn/ui]\n        H[Client-Side Filtering]\n    end\n    \n    subgraph "Backend - FastAPI"\n        I[REST API Endpoints]\n        J[Pydantic Models]\n        K[SQLModel ORM]\n        L[Database Sessions]\n    end\n    \n    subgraph "Data Layer"\n        M[PostgreSQL Database]\n        N[showcase_view]\n        O[Repository Tables]\n        P[Funding Tables]\n    end\n    \n    subgraph "External Services"\n        Q[GitHub API]\n        R[GitHub Contributors API]\n    end\n    \n    A --\x3e C\n    B --\x3e C\n    C --\x3e D\n    D --\x3e E\n    D --\x3e F\n    D --\x3e H\n    E --\x3e F\n    F --\x3e I\n    I --\x3e J\n    J --\x3e K\n    K --\x3e L\n    L --\x3e M\n    M --\x3e N\n    N --\x3e O\n    N --\x3e P\n    D --\x3e Q\n    D --\x3e R'}),"\n",(0,r.jsx)(n.h2,{id:"frontend-architecture",children:"Frontend Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"nextjs-15-with-app-router",children:"Next.js 15 with App Router"}),"\n",(0,r.jsx)(n.p,{children:"The frontend uses Next.js 15 with the new App Router for modern React development:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"frontend/\n\u251c\u2500\u2500 app/                          # Next.js App Router\n\u2502   \u251c\u2500\u2500 layout.tsx               # Root layout with providers\n\u2502   \u251c\u2500\u2500 page.tsx                 # Home page\n\u2502   \u251c\u2500\u2500 repositories/            # Repository browsing\n\u2502   \u2502   \u251c\u2500\u2500 page.tsx            # Repository list page\n\u2502   \u2502   \u251c\u2500\u2500 RepositoriesPageClient.tsx  # Client component\n\u2502   \u2502   \u2514\u2500\u2500 [owner]/[repo]/     # Dynamic repository detail\n\u2502   \u2502       \u251c\u2500\u2500 page.tsx        # Repository detail page\n\u2502   \u2502       \u2514\u2500\u2500 layout.tsx      # Repository layout\n\u2502   \u251c\u2500\u2500 about/                   # About page\n\u2502   \u251c\u2500\u2500 connect/                 # Contact/submission page\n\u2502   \u2514\u2500\u2500 Providers.tsx           # React Query provider\n\u251c\u2500\u2500 components/                   # Reusable components\n\u251c\u2500\u2500 store/                       # Zustand state management\n\u251c\u2500\u2500 lib/                         # Utility functions\n\u2514\u2500\u2500 styles/                      # Global styles\n"})}),"\n",(0,r.jsx)(n.h3,{id:"component-architecture",children:"Component Architecture"}),"\n",(0,r.jsx)(n.p,{children:"The frontend follows a component-based architecture with clear separation of concerns:"}),"\n",(0,r.jsx)(n.h4,{id:"page-components",children:"Page Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Server Components"}),": Handle initial data loading and SEO"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client Components"}),": Manage interactivity and state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Layout Components"}),": Provide consistent page structure"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"ui-components",children:"UI Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Atomic Design"}),": Small, reusable components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composition"}),": Complex components built from simpler ones"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Props Interface"}),": Type-safe component APIs"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"state-management",children:"State Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zustand"}),": Global state for filters and repositories"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TanStack Query"}),": Server state and caching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local State"}),": Component-specific state with useState"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-flow-pattern",children:"Data Flow Pattern"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant U as User\n    participant C as Component\n    participant S as Zustand Store\n    participant Q as TanStack Query\n    participant A as API\n    participant D as Database\n    \n    U->>C: Interacts with UI\n    C->>S: Updates global state\n    S->>C: Triggers re-render\n    C->>Q: Fetches data if needed\n    Q->>A: HTTP request\n    A->>D: Database query\n    D->>A: Returns data\n    A->>Q: JSON response\n    Q->>C: Updates component\n    C->>U: Renders new UI"}),"\n",(0,r.jsx)(n.h2,{id:"backend-architecture",children:"Backend Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"fastapi-service-design",children:"FastAPI Service Design"}),"\n",(0,r.jsx)(n.p,{children:"The backend is built with FastAPI following REST principles and clean architecture:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"backend/\n\u251c\u2500\u2500 main.py                      # FastAPI application and routes\n\u251c\u2500\u2500 models.py                    # SQLModel and Pydantic models\n\u251c\u2500\u2500 database.py                  # Database connection and session\n\u251c\u2500\u2500 keys.py                      # Environment configuration\n\u2514\u2500\u2500 requirements.txt             # Python dependencies\n"})}),"\n",(0,r.jsx)(n.h3,{id:"api-design-principles",children:"API Design Principles"}),"\n",(0,r.jsx)(n.h4,{id:"restful-endpoints",children:"RESTful Endpoints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource-based URLs"}),": ",(0,r.jsx)(n.code,{children:"/repositories"}),", ",(0,r.jsx)(n.code,{children:"/universities"}),", ",(0,r.jsx)(n.code,{children:"/languages"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP Methods"}),": GET for data retrieval (read-only API)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Status Codes"}),": Proper HTTP status codes for responses"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Content Type"}),": JSON for all responses"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"data-models",children:"Data Models"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# SQLModel for database operations\nclass Repository(SQLModel, table=True):\n    __tablename__ = "showcase_view"\n    full_name: str = Field(primary_key=True)\n    description: str | None\n    university: str | None\n    # ... other fields\n\n# Pydantic for API responses\nclass RepositoryResponse(BaseModel):\n    full_name: str\n    description: str | None\n    university: str | None\n    # ... other fields\n'})}),"\n",(0,r.jsx)(n.h3,{id:"database-integration",children:"Database Integration"}),"\n",(0,r.jsx)(n.h4,{id:"postgresql-with-sqlmodel",children:"PostgreSQL with SQLModel"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ORM"}),": SQLModel for type-safe database operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Migrations"}),": Database schema managed externally"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Views"}),": ",(0,r.jsx)(n.code,{children:"showcase_view"})," aggregates data from multiple tables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Indexing"}),": Optimized for filtering and search operations"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"query-optimization",children:"Query Optimization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Efficient filtering with database-level operations\nstatement = select(Repository).where(Repository.approved == True)\n\n# Dynamic filtering based on request parameters\nif university:\n    statement = statement.where(Repository.university.in_(university))\nif language:\n    statement = statement.where(Repository.language.in_(language))\n\n# Sorting with proper indexing\nstatement = statement.order_by(Repository.stargazers_count.desc())\n"})}),"\n",(0,r.jsx)(n.h2,{id:"data-architecture",children:"Data Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"database-schema",children:"Database Schema"}),"\n",(0,r.jsx)(n.p,{children:"The application uses a view-based approach for clean API interfaces:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Main view that aggregates repository data\nCREATE VIEW showcase_view AS\nSELECT \n    full_name,\n    description,\n    short_description,\n    university,\n    license,\n    owner,\n    organization,\n    language,\n    stargazers_count,\n    html_url,\n    forks_count,\n    subscribers_count,\n    created_at,\n    readme,\n    homepage,\n    default_branch,\n    approved,\n    topic_area_ai,\n    -- Contact information\n    contact_name,\n    contact_email,\n    contact_name2,\n    contact_email2,\n    contact_name3,\n    contact_email3,\n    -- Funding information\n    funder1,\n    grant_number1_1,\n    grant_number1_2,\n    grant_number1_3,\n    funder2,\n    grant_number2_1,\n    grant_number2_2,\n    grant_number2_3\nFROM repositories r\nLEFT JOIN repository_funding rf ON r.id = rf.repository_id\nLEFT JOIN funders f1 ON rf.funder1_id = f1.id\nLEFT JOIN funders f2 ON rf.funder2_id = f2.id;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"data-flow",children:"Data Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Repository Data"}),": Sourced from GitHub API and manual curation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metadata Enhancement"}),": UC-specific information added manually"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"View Aggregation"}),": ",(0,r.jsx)(n.code,{children:"showcase_view"})," combines data from multiple tables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Exposure"}),": FastAPI serves filtered and sorted data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Frontend Consumption"}),": React components display the data"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"performance-architecture",children:"Performance Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"frontend-performance",children:"Frontend Performance"}),"\n",(0,r.jsx)(n.h4,{id:"client-side-optimization",children:"Client-Side Optimization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Single Data Load"}),": All repositories fetched once and cached"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client-Side Filtering"}),": Instant results without API calls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memoization"}),": Expensive computations cached with useMemo"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Splitting"}),": Dynamic imports for route-based splitting"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// TanStack Query configuration\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 300_000,  // 5 minutes\n      gcTime: 600_000,     // 10 minutes\n      refetchOnWindowFocus: false,\n    },\n  },\n});\n"})}),"\n",(0,r.jsx)(n.h4,{id:"state-management-optimization",children:"State Management Optimization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Zustand store with selective subscriptions\nconst searchTerm = useRepositoriesStore((state) => state.searchTerm);\n// Component only re-renders when searchTerm changes\n\n// Memoized filtering for performance\nconst filteredRepositories = useMemo(() => {\n  // Expensive filtering logic\n}, [repositories, filters, searchTerm]);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"backend-performance",children:"Backend Performance"}),"\n",(0,r.jsx)(n.h4,{id:"database-optimization",children:"Database Optimization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Indexed Columns"}),": All filterable fields have database indexes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"View-Based Queries"}),": Pre-aggregated data for faster access"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Pooling"}),": Efficient database connection management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Query Optimization"}),": Minimal database round trips"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"api-performance",children:"API Performance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Efficient filtering at database level\ndef list_repositories(\n    university: List[str] = None,\n    language: List[str] = None,\n    # ... other filters\n):\n    statement = select(Repository).where(Repository.approved == True)\n    \n    # Apply filters at database level\n    if university:\n        statement = statement.where(Repository.university.in_(university))\n    \n    return session.exec(statement).all()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"security-architecture",children:"Security Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"frontend-security",children:"Frontend Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": TypeScript prevents runtime errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Validation"}),": Zod schemas validate all user input"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"XSS Prevention"}),": React's built-in XSS protection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTPS Only"}),": All production traffic over HTTPS"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"backend-security",children:"Backend Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input Validation"}),": Pydantic models validate all requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQL Injection Prevention"}),": SQLModel ORM prevents SQL injection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CORS Configuration"}),": Proper CORS headers for cross-origin requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate Limiting"}),": API rate limiting (planned feature)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"data-security",children:"Data Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Read-Only API"}),": No write operations exposed publicly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Approved Content"}),": Only approved repositories shown"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Public Data"}),": All displayed data is already public on GitHub"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"scalability-architecture",children:"Scalability Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"horizontal-scaling",children:"Horizontal Scaling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stateless Backend"}),": FastAPI service can be horizontally scaled"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Scaling"}),": PostgreSQL supports read replicas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CDN Integration"}),": Static assets served via CDN"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Microservices Ready"}),": Architecture supports service decomposition"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"vertical-scaling",children:"Vertical Scaling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database Optimization"}),": Efficient queries and indexing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Caching Layers"}),": Multiple levels of caching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Optimization"}),": Minimal resource usage per request"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"development-architecture",children:"Development Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"type-safety",children:"Type Safety"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"End-to-End Types"}),": TypeScript from frontend to backend"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Schema Validation"}),": Pydantic and Zod ensure data integrity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Contracts"}),": OpenAPI specification for API documentation"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph LR\n    A[Local Development] --\x3e B[Type Checking]\n    B --\x3e C[Linting & Formatting]\n    C --\x3e D[Testing]\n    D --\x3e E[Build]\n    E --\x3e F[Deployment]\n    \n    subgraph "Quality Gates"\n        G[ESLint]\n        H[Prettier]\n        I[TypeScript]\n        J[Tests]\n    end\n    \n    B --\x3e I\n    C --\x3e G\n    C --\x3e H\n    D --\x3e J'}),"\n",(0,r.jsx)(n.h3,{id:"deployment-architecture",children:"Deployment Architecture"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Frontend"}),": Vercel for Next.js deployment"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend"}),": Docker containers for FastAPI"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database"}),": Managed PostgreSQL service"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Separate Docusaurus deployment"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This architecture provides a solid foundation for a scalable, maintainable, and performant application while ensuring type safety and developer experience."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);