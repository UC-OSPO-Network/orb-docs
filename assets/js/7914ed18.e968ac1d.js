"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[4056],{3198:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/repositories","title":"Repositories API","description":"The repositories API is the core of UC ORB Showcase, providing comprehensive access to repository data with advanced filtering, searching, and sorting capabilities.","source":"@site/docs/api/repositories.md","sourceDirName":"api","slug":"/api/repositories","permalink":"/orb-docs/docs/api/repositories","draft":false,"unlisted":false,"editUrl":"https://github.com/UC-OSPO-Network/orb-showcase/tree/main/doc/docs/api/repositories.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"apiSidebar","previous":{"title":"API Overview","permalink":"/orb-docs/docs/api/overview"}}');var s=r(4848),t=r(8453);const a={sidebar_position:2},o="Repositories API",l={},d=[{value:"Endpoints Overview",id:"endpoints-overview",level:2},{value:"List Repositories",id:"list-repositories",level:2},{value:"Endpoint",id:"endpoint",level:3},{value:"Description",id:"description",level:3},{value:"Query Parameters",id:"query-parameters",level:3},{value:"Search Parameters",id:"search-parameters",level:4},{value:"Filter Parameters",id:"filter-parameters",level:4},{value:"Sorting Parameters",id:"sorting-parameters",level:4},{value:"Pagination Parameters",id:"pagination-parameters",level:4},{value:"Request Examples",id:"request-examples",level:3},{value:"Basic Request",id:"basic-request",level:4},{value:"Search Request",id:"search-request",level:4},{value:"Filtered Request",id:"filtered-request",level:4},{value:"Complex Request",id:"complex-request",level:4},{value:"Pagination Request",id:"pagination-request",level:4},{value:"Response Format",id:"response-format",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok",level:4},{value:"Error Responses",id:"error-responses",level:4},{value:"Implementation Details",id:"implementation-details",level:3},{value:"Database Query",id:"database-query",level:4},{value:"Performance Optimizations",id:"performance-optimizations",level:4},{value:"Get Repository Details",id:"get-repository-details",level:2},{value:"Endpoint",id:"endpoint-1",level:3},{value:"Description",id:"description-1",level:3},{value:"Path Parameters",id:"path-parameters",level:3},{value:"Request Examples",id:"request-examples-1",level:3},{value:"Basic Request",id:"basic-request-1",level:4},{value:"URL Encoding for Special Characters",id:"url-encoding-for-special-characters",level:4},{value:"Response Format",id:"response-format-1",level:3},{value:"Success Response (200 OK)",id:"success-response-200-ok-1",level:4},{value:"Error Responses",id:"error-responses-1",level:4},{value:"Implementation Details",id:"implementation-details-1",level:3},{value:"Database Query",id:"database-query-1",level:4},{value:"Data Model",id:"data-model",level:2},{value:"Repository Response Model",id:"repository-response-model",level:3},{value:"Field Descriptions",id:"field-descriptions",level:3},{value:"Core Fields",id:"core-fields",level:4},{value:"GitHub Fields",id:"github-fields",level:4},{value:"Content Fields",id:"content-fields",level:4},{value:"UC-Specific Fields",id:"uc-specific-fields",level:4},{value:"Funding Fields",id:"funding-fields",level:4},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Frontend Integration",id:"frontend-integration",level:3},{value:"Fetching All Repositories",id:"fetching-all-repositories",level:4},{value:"Fetching with Filters",id:"fetching-with-filters",level:4},{value:"Fetching Specific Repository",id:"fetching-specific-repository",level:4},{value:"JavaScript/Node.js Integration",id:"javascriptnodejs-integration",level:3},{value:"Basic Fetch",id:"basic-fetch",level:4},{value:"Advanced Filtering",id:"advanced-filtering",level:4},{value:"Python Integration",id:"python-integration",level:3},{value:"Using requests",id:"using-requests",level:4},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Database Optimization",id:"database-optimization",level:3},{value:"Caching Recommendations",id:"caching-recommendations",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"repositories-api",children:"Repositories API"})}),"\n",(0,s.jsx)(n.p,{children:"The repositories API is the core of UC ORB Showcase, providing comprehensive access to repository data with advanced filtering, searching, and sorting capabilities."}),"\n",(0,s.jsx)(n.h2,{id:"endpoints-overview",children:"Endpoints Overview"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Endpoint"}),(0,s.jsx)(n.th,{children:"Method"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/repositories"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"List repositories with filtering and pagination"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"/repositories/{owner}/{repo}"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"Get specific repository details"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"list-repositories",children:"List Repositories"}),"\n",(0,s.jsx)(n.h3,{id:"endpoint",children:"Endpoint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /repositories\n"})}),"\n",(0,s.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Retrieves a list of repositories with comprehensive filtering, searching, and sorting options. This endpoint supports all the filtering capabilities used by the frontend application."}),"\n",(0,s.jsx)(n.h3,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,s.jsx)(n.h4,{id:"search-parameters",children:"Search Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"q"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"Search term for repository name or description"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"q=machine learning"})})]})})]}),"\n",(0,s.jsx)(n.h4,{id:"filter-parameters",children:"Filter Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"university"})}),(0,s.jsx)(n.td,{children:"array[string]"}),(0,s.jsx)(n.td,{children:"Filter by UC campus"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"university=UC Berkeley&university=UCLA"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"language"})}),(0,s.jsx)(n.td,{children:"array[string]"}),(0,s.jsx)(n.td,{children:"Filter by programming language"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"language=Python&language=JavaScript"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"license"})}),(0,s.jsx)(n.td,{children:"array[string]"}),(0,s.jsx)(n.td,{children:"Filter by license type"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"license=MIT&license=Apache-2.0"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"owner"})}),(0,s.jsx)(n.td,{children:"array[string]"}),(0,s.jsx)(n.td,{children:"Filter by repository owner/organization"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"owner=uc-berkeley&owner=ucla-cs"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"topic_area_ai"})}),(0,s.jsx)(n.td,{children:"array[string]"}),(0,s.jsx)(n.td,{children:"Filter by AI-generated topic area"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"topic_area_ai=Machine Learning"})})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"sorting-parameters",children:"Sorting Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Options"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"sort"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stargazers_count"})}),(0,s.jsx)(n.td,{children:"Field to sort by"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"stargazers_count"}),", ",(0,s.jsx)(n.code,{children:"forks_count"}),", ",(0,s.jsx)(n.code,{children:"created_at"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"order"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"desc"})}),(0,s.jsx)(n.td,{children:"Sort order"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"asc"}),", ",(0,s.jsx)(n.code,{children:"desc"})]})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"pagination-parameters",children:"Pagination Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Default"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Constraints"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"limit"})}),(0,s.jsx)(n.td,{children:"integer"}),(0,s.jsx)(n.td,{children:"none"}),(0,s.jsx)(n.td,{children:"Number of results to return"}),(0,s.jsx)(n.td,{children:"1-100"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"offset"})}),(0,s.jsx)(n.td,{children:"integer"}),(0,s.jsx)(n.td,{children:"none"}),(0,s.jsx)(n.td,{children:"Number of results to skip"}),(0,s.jsx)(n.td,{children:"\u2265 0"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"request-examples",children:"Request Examples"}),"\n",(0,s.jsx)(n.h4,{id:"basic-request",children:"Basic Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl "http://localhost:8000/repositories"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"search-request",children:"Search Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl "http://localhost:8000/repositories?q=machine%20learning"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"filtered-request",children:"Filtered Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl "http://localhost:8000/repositories?university=UC%20Berkeley&language=Python"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"complex-request",children:"Complex Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl "http://localhost:8000/repositories?university=UC%20Berkeley&university=UCLA&language=Python&sort=stargazers_count&order=desc&limit=20"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"pagination-request",children:"Pagination Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl "http://localhost:8000/repositories?limit=10&offset=20"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"response-format",children:"Response Format"}),"\n",(0,s.jsx)(n.h4,{id:"success-response-200-ok",children:"Success Response (200 OK)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "full_name": "uc-berkeley/example-repo",\n    "description": "An example repository for machine learning research",\n    "university": "UC Berkeley",\n    "license": "MIT",\n    "owner": "uc-berkeley",\n    "organization": "1",\n    "language": "Python",\n    "stargazers_count": "150",\n    "html_url": "https://github.com/uc-berkeley/example-repo",\n    "forks_count": "25",\n    "subscribers_count": "10",\n    "created_at": "2023-01-15T10:30:00Z",\n    "readme": "# Example Repository\\n\\nThis repository demonstrates...",\n    "homepage": "https://example.berkeley.edu",\n    "default_branch": "main",\n    "topic_area_ai": "Machine Learning",\n    "funder1": "NSF",\n    "grant_number1_1": "NSF-2023-001",\n    "grant_number1_2": null,\n    "grant_number1_3": null,\n    "funder2": "NIH",\n    "grant_number2_1": "NIH-2023-002",\n    "grant_number2_2": null,\n    "grant_number2_3": null\n  }\n]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"error-responses",children:"Error Responses"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"400 Bad Request - Invalid Parameters"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Invalid sort field: invalid_field. Must be one of: stargazers_count, forks_count, created_at"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"422 Validation Error - Parameter Validation Failed"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "detail": [\n    {\n      "loc": ["query", "limit"],\n      "msg": "ensure this value is less than or equal to 100",\n      "type": "value_error.number.not_le",\n      "ctx": {"limit_value": 100}\n    }\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h4,{id:"database-query",children:"Database Query"}),"\n",(0,s.jsx)(n.p,{children:"The endpoint uses efficient database queries with proper indexing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def list_repositories(\n    q: str = Query(None, description="Search term for name/description"),\n    university: List[str] = Query(None, description="University filter"),\n    language: List[str] = Query(None, description="Language filter"),\n    license: List[str] = Query(None, description="License filter"),\n    owner: List[str] = Query(None, description="Organization/Owner filter"),\n    topic_area_ai: List[str] = Query(None, description="Topic Area AI filter"),\n    sort: str = Query("stargazers_count", description="Sort by field"),\n    order: str = Query("desc", description="Sort order: asc or desc"),\n    limit: int = Query(None, ge=1, le=100, description="Number of results"),\n    offset: int = Query(None, ge=0, description="Number of results to skip"),\n    session: Session = Depends(get_session)\n):\n    # Base query with approval filter\n    statement = select(Repository).where(Repository.approved == True)\n    \n    # Apply sorting\n    sort_map = {\n        "stargazers_count": Repository.stargazers_count,\n        "forks_count": Repository.forks_count,\n        "created_at": Repository.created_at,\n    }\n    sort_field = sort_map.get(sort, Repository.stargazers_count)\n    \n    if order == "asc":\n        statement = statement.order_by(sort_field.asc())\n    else:\n        statement = statement.order_by(sort_field.desc())\n    \n    # Apply search filter\n    if q:\n        search = f"%{q.lower()}%"\n        statement = statement.where(\n            (Repository.full_name.ilike(search)) | \n            (Repository.description.ilike(search))\n        )\n    \n    # Apply category filters\n    if university:\n        statement = statement.where(Repository.university.in_(university))\n    if language:\n        statement = statement.where(Repository.language.in_(language))\n    if license:\n        statement = statement.where(Repository.license.in_(license))\n    if owner:\n        statement = statement.where(Repository.owner.in_(owner))\n    if topic_area_ai:\n        statement = statement.where(Repository.topic_area_ai.in_(topic_area_ai))\n    \n    # Apply pagination\n    if limit:\n        statement = statement.limit(limit)\n    if offset:\n        statement = statement.offset(offset)\n    \n    # Execute query and transform results\n    results = session.exec(statement).all()\n    \n    response = []\n    for repo in results:\n        repo_dict = repo.dict()\n        # Use short_description for API response\n        repo_dict["description"] = repo_dict.get("short_description")\n        repo_dict.pop("short_description", None)\n        \n        # Convert datetime fields to ISO strings\n        for dt_field in ["created_at", "updated_at", "pushed_at"]:\n            if dt_field in repo_dict and hasattr(repo_dict[dt_field], "isoformat"):\n                repo_dict[dt_field] = repo_dict[dt_field].isoformat()\n        \n        response.append(RepositoryResponse(**repo_dict))\n    \n    return response\n'})}),"\n",(0,s.jsx)(n.h4,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database Indexes"}),": All filterable fields have proper indexes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Query Optimization"}),": Filters applied at database level"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Result Limiting"}),": Maximum 100 results per request"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Efficient Sorting"}),": Database-level sorting with indexed fields"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"get-repository-details",children:"Get Repository Details"}),"\n",(0,s.jsx)(n.h3,{id:"endpoint-1",children:"Endpoint"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-http",children:"GET /repositories/{owner}/{repo}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"description-1",children:"Description"}),"\n",(0,s.jsx)(n.p,{children:"Retrieves detailed information about a specific repository using the owner and repository name."}),"\n",(0,s.jsx)(n.h3,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Required"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Example"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"owner"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Repository owner/organization name"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"uc-berkeley"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"repo"})}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{children:"Repository name"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"example-repo"})})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"request-examples-1",children:"Request Examples"}),"\n",(0,s.jsx)(n.h4,{id:"basic-request-1",children:"Basic Request"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'curl "http://localhost:8000/repositories/uc-berkeley/example-repo"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"url-encoding-for-special-characters",children:"URL Encoding for Special Characters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Repository names with special characters need URL encoding\ncurl "http://localhost:8000/repositories/uc-berkeley/my-awesome-project"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"response-format-1",children:"Response Format"}),"\n",(0,s.jsx)(n.h4,{id:"success-response-200-ok-1",children:"Success Response (200 OK)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "full_name": "uc-berkeley/example-repo",\n  "description": "An example repository for machine learning research at UC Berkeley",\n  "university": "UC Berkeley",\n  "license": "MIT",\n  "owner": "uc-berkeley",\n  "organization": "1",\n  "language": "Python",\n  "stargazers_count": "150",\n  "html_url": "https://github.com/uc-berkeley/example-repo",\n  "forks_count": "25",\n  "subscribers_count": "10",\n  "created_at": "2023-01-15T10:30:00Z",\n  "readme": "# Example Repository\\n\\nThis repository demonstrates machine learning techniques...\\n\\n## Installation\\n\\n```bash\\npip install -r requirements.txt\\n```\\n\\n## Usage\\n\\n```python\\nfrom example import Model\\nmodel = Model()\\nresults = model.train(data)\\n```",\n  "homepage": "https://example.berkeley.edu",\n  "default_branch": "main",\n  "topic_area_ai": "Machine Learning",\n  "funder1": "National Science Foundation",\n  "grant_number1_1": "NSF-2023-001",\n  "grant_number1_2": "NSF-2023-002",\n  "grant_number1_3": null,\n  "funder2": "National Institutes of Health",\n  "grant_number2_1": "NIH-2023-003",\n  "grant_number2_2": null,\n  "grant_number2_3": null\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"error-responses-1",children:"Error Responses"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"404 Not Found - Repository Not Found"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Repository not found"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"400 Bad Request - Invalid Parameters"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Owner and repo parameters are required"\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"implementation-details-1",children:"Implementation Details"}),"\n",(0,s.jsx)(n.h4,{id:"database-query-1",children:"Database Query"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def get_repository(owner: str, repo: str, session: Session = Depends(get_session)):\n    # Construct full name from path parameters\n    full_name = f"{owner}/{repo}"\n    \n    # Validate parameters\n    if not owner or not repo:\n        raise HTTPException(status_code=400, detail="Owner and repo are required")\n    \n    # Query database\n    statement = select(Repository).where(\n        Repository.full_name == full_name,\n        Repository.approved == True\n    )\n    repository = session.exec(statement).first()\n    \n    # Handle not found\n    if not repository:\n        raise HTTPException(status_code=404, detail="Repository not found")\n    \n    # Transform response\n    repo_dict = repository.dict()\n    repo_dict["description"] = repo_dict.get("short_description")\n    repo_dict.pop("short_description", None)\n    \n    # Convert datetime fields\n    for dt_field in ["created_at", "updated_at", "pushed_at"]:\n        if dt_field in repo_dict and hasattr(repo_dict[dt_field], "isoformat"):\n            repo_dict[dt_field] = repo_dict[dt_field].isoformat()\n    \n    return RepositoryResponse(**repo_dict)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"data-model",children:"Data Model"}),"\n",(0,s.jsx)(n.h3,{id:"repository-response-model",children:"Repository Response Model"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'interface RepositoryResponse {\n  // Core repository information\n  full_name: string;                    // "uc-berkeley/example-repo"\n  description?: string;                 // Repository description (from short_description)\n  university?: string;                  // "UC Berkeley"\n  license?: string;                     // "MIT"\n  owner?: string;                       // "uc-berkeley"\n  organization?: string;                // "1" if organization, null if user\n  language?: string;                    // "Python"\n  \n  // GitHub statistics\n  stargazers_count?: string;            // "150"\n  html_url?: string;                    // "https://github.com/..."\n  forks_count?: string;                 // "25"\n  subscribers_count?: string;           // "10"\n  created_at?: string;                  // "2023-01-15T10:30:00Z"\n  \n  // Repository content\n  readme?: string;                      // Full README content\n  homepage?: string;                    // "https://example.com"\n  default_branch?: string;              // "main"\n  \n  // UC-specific metadata\n  topic_area_ai?: string;               // "Machine Learning"\n  \n  // Funding information\n  funder1?: string;                     // "National Science Foundation"\n  grant_number1_1?: string;             // "NSF-2023-001"\n  grant_number1_2?: string;             // Additional grant number\n  grant_number1_3?: string;             // Additional grant number\n  funder2?: string;                     // "National Institutes of Health"\n  grant_number2_1?: string;             // "NIH-2023-003"\n  grant_number2_2?: string;             // Additional grant number\n  grant_number2_3?: string;             // Additional grant number\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"field-descriptions",children:"Field Descriptions"}),"\n",(0,s.jsx)(n.h4,{id:"core-fields",children:"Core Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"full_name"}),': Repository identifier in "owner/repo" format (primary key)']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"description"}),": Human-readable repository description (uses short_description from database)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"university"}),": Associated UC campus name"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"license"}),": Open source license type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"owner"}),": Repository owner (user or organization name)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"organization"}),': Flag indicating if owner is an organization ("1") or user (null)']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"language"}),": Primary programming language"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"github-fields",children:"GitHub Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"stargazers_count"}),": Number of GitHub stars (stored as string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"html_url"}),": Direct link to GitHub repository"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"forks_count"}),": Number of repository forks (stored as string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"subscribers_count"}),": Number of repository watchers (stored as string)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"created_at"}),": Repository creation timestamp (ISO 8601 format)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"content-fields",children:"Content Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"readme"}),": Full README.md content with markdown formatting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"homepage"}),": Project website or documentation URL"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"default_branch"}),': Default branch name (usually "main" or "master")']}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"uc-specific-fields",children:"UC-Specific Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"topic_area_ai"}),": AI-generated topic classification for research area categorization"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"funding-fields",children:"Funding Fields"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"funder1/funder2"}),": Primary and secondary funding organizations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"grant_number1_1, grant_number1_2, grant_number1_3"}),": Multiple grant numbers for primary funder"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"grant_number2_1, grant_number2_2, grant_number2_3"}),": Multiple grant numbers for secondary funder"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"frontend-integration",children:"Frontend Integration"}),"\n",(0,s.jsx)(n.h4,{id:"fetching-all-repositories",children:"Fetching All Repositories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const { data: repositories, isLoading, error } = useQuery({\n  queryKey: ['repositories'],\n  queryFn: async () => {\n    const response = await fetch(`${API_URL}/repositories`);\n    if (!response.ok) throw new Error('Failed to fetch repositories');\n    return response.json();\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"fetching-with-filters",children:"Fetching with Filters"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const fetchFilteredRepositories = async (filters: FilterState) => {\n  const params = new URLSearchParams();\n  \n  if (filters.search) params.append('q', filters.search);\n  if (filters.universities.length > 0) {\n    filters.universities.forEach(uni => params.append('university', uni));\n  }\n  if (filters.languages.length > 0) {\n    filters.languages.forEach(lang => params.append('language', lang));\n  }\n  \n  const response = await fetch(`${API_URL}/repositories?${params}`);\n  return response.json();\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"fetching-specific-repository",children:"Fetching Specific Repository"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const { data: repository } = useQuery({\n  queryKey: ['repository', owner, repo],\n  queryFn: async () => {\n    const response = await fetch(`${API_URL}/repositories/${owner}/${repo}`);\n    if (response.status === 404) {\n      throw new Error('Repository not found');\n    }\n    if (!response.ok) throw new Error('Failed to fetch repository');\n    return response.json();\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"javascriptnodejs-integration",children:"JavaScript/Node.js Integration"}),"\n",(0,s.jsx)(n.h4,{id:"basic-fetch",children:"Basic Fetch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const axios = require('axios');\n\nasync function getRepositories() {\n  try {\n    const response = await axios.get('http://localhost:8000/repositories');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching repositories:', error.message);\n    throw error;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"advanced-filtering",children:"Advanced Filtering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"async function searchRepositories(searchTerm, filters = {}) {\n  const params = new URLSearchParams();\n  \n  if (searchTerm) params.append('q', searchTerm);\n  if (filters.university) {\n    filters.university.forEach(uni => params.append('university', uni));\n  }\n  if (filters.language) {\n    filters.language.forEach(lang => params.append('language', lang));\n  }\n  \n  const url = `http://localhost:8000/repositories?${params}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\n// Usage\nconst results = await searchRepositories('machine learning', {\n  university: ['UC Berkeley', 'UCLA'],\n  language: ['Python', 'R']\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"python-integration",children:"Python Integration"}),"\n",(0,s.jsx)(n.h4,{id:"using-requests",children:"Using requests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import requests\nfrom typing import List, Optional, Dict, Any\n\nclass ORBClient:\n    def __init__(self, base_url: str = "http://localhost:8000"):\n        self.base_url = base_url\n    \n    def get_repositories(\n        self,\n        search: Optional[str] = None,\n        university: Optional[List[str]] = None,\n        language: Optional[List[str]] = None,\n        limit: Optional[int] = None\n    ) -> List[Dict[str, Any]]:\n        """Fetch repositories with optional filtering."""\n        params = {}\n        \n        if search:\n            params[\'q\'] = search\n        if university:\n            params[\'university\'] = university\n        if language:\n            params[\'language\'] = language\n        if limit:\n            params[\'limit\'] = limit\n        \n        response = requests.get(f"{self.base_url}/repositories", params=params)\n        response.raise_for_status()\n        return response.json()\n    \n    def get_repository(self, owner: str, repo: str) -> Dict[str, Any]:\n        """Fetch specific repository details."""\n        response = requests.get(f"{self.base_url}/repositories/{owner}/{repo}")\n        response.raise_for_status()\n        return response.json()\n\n# Usage\nclient = ORBClient()\nrepositories = client.get_repositories(\n    search="machine learning",\n    university=["UC Berkeley"],\n    language=["Python"],\n    limit=10\n)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"database-optimization",children:"Database Optimization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All filterable fields have database indexes"}),"\n",(0,s.jsx)(n.li,{children:"Queries use database-level filtering for efficiency"}),"\n",(0,s.jsx)(n.li,{children:"Results are limited to prevent large response payloads"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"caching-recommendations",children:"Caching Recommendations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache repository lists for 5-10 minutes"}),"\n",(0,s.jsx)(n.li,{children:"Cache individual repository details for 15-30 minutes"}),"\n",(0,s.jsx)(n.li,{children:"Use ETags or Last-Modified headers for conditional requests"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Current implementation has no rate limiting"}),"\n",(0,s.jsx)(n.li,{children:"Recommended: 1000 requests per hour per IP for production"}),"\n",(0,s.jsx)(n.li,{children:"Consider implementing API keys for higher limits"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This API provides a robust foundation for building applications that showcase and discover UC open source repositories."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);