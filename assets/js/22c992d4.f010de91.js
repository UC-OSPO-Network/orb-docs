"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[9514],{7265:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"components/state-management","title":"State Management","description":"UC ORB Showcase uses a modern state management approach combining Zustand for global state and TanStack Query for server state management. This section covers the complete state management architecture.","source":"@site/docs/components/state-management.md","sourceDirName":"components","slug":"/components/state-management","permalink":"/orb-docs/docs/components/state-management","draft":false,"unlisted":false,"editUrl":"https://github.com/UC-OSPO-Network/orb-showcase/tree/main/doc/docs/components/state-management.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"componentsSidebar","previous":{"title":"UI Components","permalink":"/orb-docs/docs/components/ui-components"}}');var s=r(4848),i=r(8453);const o={sidebar_position:4},a="State Management",c={},l=[{value:"State Architecture Overview",id:"state-architecture-overview",level:2},{value:"Zustand Store",id:"zustand-store",level:2},{value:"Store Definition",id:"store-definition",level:3},{value:"Store Usage Patterns",id:"store-usage-patterns",level:3},{value:"Selective Subscriptions",id:"selective-subscriptions",level:4},{value:"State Updates",id:"state-updates",level:4},{value:"TanStack Query Integration",id:"tanstack-query-integration",level:2},{value:"Query Client Configuration",id:"query-client-configuration",level:3},{value:"Repository Data Queries",id:"repository-data-queries",level:3},{value:"Fetch All Repositories",id:"fetch-all-repositories",level:4},{value:"Fetch Individual Repository",id:"fetch-individual-repository",level:4},{value:"Fetch Filter Options",id:"fetch-filter-options",level:4},{value:"Fetch Contributors",id:"fetch-contributors",level:4},{value:"Client-Side Filtering",id:"client-side-filtering",level:2},{value:"Filtering Logic",id:"filtering-logic",level:3},{value:"Pagination State",id:"pagination-state",level:3},{value:"URL State Synchronization",id:"url-state-synchronization",level:2},{value:"Search Parameter Sync",id:"search-parameter-sync",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Query Error Handling",id:"query-error-handling",level:3},{value:"Repository Detail Error Handling",id:"repository-detail-error-handling",level:3},{value:"Performance Optimizations",id:"performance-optimizations",level:2},{value:"Memoization",id:"memoization",level:3},{value:"Selective Re-renders",id:"selective-re-renders",level:3},{value:"Query Optimization",id:"query-optimization",level:3},{value:"State Management Best Practices",id:"state-management-best-practices",level:2},{value:"1. Separation of Concerns",id:"1-separation-of-concerns",level:3},{value:"2. Selective Subscriptions",id:"2-selective-subscriptions",level:3},{value:"3. Proper Cache Keys",id:"3-proper-cache-keys",level:3},{value:"4. Error Boundaries",id:"4-error-boundaries",level:3},{value:"5. Loading States",id:"5-loading-states",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"state-management",children:"State Management"})}),"\n",(0,s.jsx)(n.p,{children:"UC ORB Showcase uses a modern state management approach combining Zustand for global state and TanStack Query for server state management. This section covers the complete state management architecture."}),"\n",(0,s.jsx)(n.h2,{id:"state-architecture-overview",children:"State Architecture Overview"}),"\n",(0,s.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client State (Zustand)"\n        A[Repository Store]\n        B[Filter State]\n        C[UI State]\n    end\n    \n    subgraph "Server State (TanStack Query)"\n        D[Repository Data]\n        E[Filter Options]\n        F[Individual Repository]\n        G[Contributors Data]\n    end\n    \n    subgraph "Components"\n        H[RepositoriesPageClient]\n        I[RepositoryFilters]\n        J[RepositoryPage]\n    end\n    \n    A --\x3e H\n    B --\x3e I\n    D --\x3e H\n    E --\x3e I\n    F --\x3e J\n    G --\x3e J\n    \n    H --\x3e A\n    I --\x3e B\n    J --\x3e C'}),"\n",(0,s.jsx)(n.h2,{id:"zustand-store",children:"Zustand Store"}),"\n",(0,s.jsx)(n.p,{children:"The application uses a single Zustand store for managing global client state, primarily focused on repository filtering and search functionality."}),"\n",(0,s.jsx)(n.h3,{id:"store-definition",children:"Store Definition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// store/repositories.ts\nimport { create } from 'zustand';\n\nexport interface Repository {\n  full_name: string;\n  description?: string;\n  language?: string;\n  license?: string;\n  owner?: string;\n  university?: string;\n  stargazers_count?: string;\n  forks_count?: string;\n  subscribers_count?: string;\n  created_at?: string;\n  updated_at?: string;\n  pushed_at?: string;\n  readme?: string;\n  default_branch?: string;\n  topic_area_ai?: string;\n  html_url?: string;\n  homepage?: string;\n  organization?: string;\n  // Contact information\n  contact_name?: string;\n  contact_email?: string;\n  contact_name2?: string;\n  contact_email2?: string;\n  contact_name3?: string;\n  contact_email3?: string;\n  // Funding information\n  funder1?: string;\n  grant_number1_1?: string;\n  grant_number1_2?: string;\n  grant_number1_3?: string;\n  funder2?: string;\n  grant_number2_1?: string;\n  grant_number2_2?: string;\n  grant_number2_3?: string;\n}\n\ninterface RepositoriesState {\n  // Repository data\n  repositories: Repository[];\n  setRepositories: (repositories: Repository[]) => void;\n  \n  // Search state\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  \n  // Filter states\n  universitiesSelected: string[];\n  setUniversitiesSelected: (universities: string[]) => void;\n  \n  languagesSelected: string[];\n  setLanguagesSelected: (languages: string[]) => void;\n  \n  licensesSelected: string[];\n  setLicensesSelected: (licenses: string[]) => void;\n  \n  ownersSelected: string[];\n  setOwnersSelected: (owners: string[]) => void;\n  \n  topicsSelected: string[];\n  setTopicsSelected: (topics: string[]) => void;\n}\n\nexport const useRepositoriesStore = create<RepositoriesState>((set) => ({\n  // Initial state\n  repositories: [],\n  searchTerm: \"\",\n  universitiesSelected: [],\n  languagesSelected: [],\n  licensesSelected: [],\n  ownersSelected: [],\n  topicsSelected: [],\n  \n  // Actions\n  setRepositories: (repositories) => set({ repositories }),\n  setSearchTerm: (searchTerm) => set({ searchTerm }),\n  setUniversitiesSelected: (universitiesSelected) => set({ universitiesSelected }),\n  setLanguagesSelected: (languagesSelected) => set({ languagesSelected }),\n  setLicensesSelected: (licensesSelected) => set({ licensesSelected }),\n  setOwnersSelected: (ownersSelected) => set({ ownersSelected }),\n  setTopicsSelected: (topicsSelected) => set({ topicsSelected }),\n}));\n"})}),"\n",(0,s.jsx)(n.h3,{id:"store-usage-patterns",children:"Store Usage Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"selective-subscriptions",children:"Selective Subscriptions"}),"\n",(0,s.jsx)(n.p,{children:"Components subscribe only to the state they need, preventing unnecessary re-renders:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Only subscribe to search term\nconst searchTerm = useRepositoriesStore((state) => state.searchTerm);\nconst setSearchTerm = useRepositoriesStore((state) => state.setSearchTerm);\n\n// Only subscribe to university filters\nconst universitiesSelected = useRepositoriesStore((state) => state.universitiesSelected);\nconst setUniversitiesSelected = useRepositoriesStore((state) => state.setUniversitiesSelected);\n\n// Subscribe to multiple related pieces of state\nconst { repositories, searchTerm, universitiesSelected } = useRepositoriesStore((state) => ({\n  repositories: state.repositories,\n  searchTerm: state.searchTerm,\n  universitiesSelected: state.universitiesSelected,\n}));\n"})}),"\n",(0,s.jsx)(n.h4,{id:"state-updates",children:"State Updates"}),"\n",(0,s.jsx)(n.p,{children:"State updates are performed through dedicated setter functions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'function SearchInput() {\n  const searchTerm = useRepositoriesStore((state) => state.searchTerm);\n  const setSearchTerm = useRepositoriesStore((state) => state.setSearchTerm);\n  \n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(event.target.value);\n  };\n  \n  return (\n    <Input\n      value={searchTerm}\n      onChange={handleSearchChange}\n      placeholder="Search repositories..."\n    />\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"tanstack-query-integration",children:"TanStack Query Integration"}),"\n",(0,s.jsx)(n.p,{children:"TanStack Query manages all server state, providing caching, background updates, and error handling."}),"\n",(0,s.jsx)(n.h3,{id:"query-client-configuration",children:"Query Client Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// app/Providers.tsx\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 300_000,  // 5 minutes\n      gcTime: 600_000,     // 10 minutes (formerly cacheTime)\n      refetchOnWindowFocus: false,\n      retry: (failureCount, error) => {\n        // Don't retry on 404s\n        if (error instanceof Error && error.message.includes('404')) {\n          return false;\n        }\n        return failureCount < 3;\n      },\n    },\n  },\n});\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"repository-data-queries",children:"Repository Data Queries"}),"\n",(0,s.jsx)(n.h4,{id:"fetch-all-repositories",children:"Fetch All Repositories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// In RepositoriesPageClient component\nconst { data: repositories, isLoading, error } = useQuery({\n  queryKey: ['repositories'],\n  queryFn: async () => {\n    const response = await fetch(`${API_URL}/repositories`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch repositories');\n    }\n    return response.json();\n  },\n  staleTime: 300_000, // 5 minutes\n});\n\n// Update Zustand store when data is fetched\nuseEffect(() => {\n  if (repositories && repositories.length > 0) {\n    setRepositories(repositories);\n  }\n}, [repositories, setRepositories]);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"fetch-individual-repository",children:"Fetch Individual Repository"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// In RepositoryDetailPage component\nconst { data: repository, isLoading, error, isFetched } = useQuery<Repository>({\n  queryKey: ['repository', owner, repo],\n  queryFn: async () => {\n    const response = await fetch(`${API_URL}/repositories/${owner}/${repo}`);\n    if (response.status === 404) {\n      const errorData = await response.json().catch(() => ({}));\n      const message = errorData.detail || 'Repository not found';\n      const error = new Error(message);\n      (error as any).code = 404;\n      throw error;\n    }\n    if (!response.ok) {\n      throw new Error('Failed to fetch repository');\n    }\n    return response.json();\n  },\n  enabled: !!owner && !!repo,\n  retry: false,\n  staleTime: 300_000,\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"fetch-filter-options",children:"Fetch Filter Options"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Filter option queries\nconst { data: universities = [] } = useQuery({\n  queryKey: ['universities'],\n  queryFn: () => fetch(`${API_URL}/universities`).then(res => res.json()),\n  staleTime: 600_000, // 10 minutes - filter options change rarely\n});\n\nconst { data: languages = [] } = useQuery({\n  queryKey: ['languages'],\n  queryFn: () => fetch(`${API_URL}/languages`).then(res => res.json()),\n  staleTime: 600_000,\n});\n\nconst { data: licenses = [] } = useQuery({\n  queryKey: ['licenses'],\n  queryFn: () => fetch(`${API_URL}/licenses`).then(res => res.json()),\n  staleTime: 600_000,\n});\n\nconst { data: organizations = [] } = useQuery({\n  queryKey: ['organizations'],\n  queryFn: () => fetch(`${API_URL}/organizations`).then(res => res.json()),\n  staleTime: 600_000,\n});\n\nconst { data: topics = [] } = useQuery({\n  queryKey: ['topics'],\n  queryFn: () => fetch(`${API_URL}/topics`).then(res => res.json()),\n  staleTime: 600_000,\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"fetch-contributors",children:"Fetch Contributors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// In RepositoryDetailPage component\nconst { data: contributors = [], isLoading: isContributorsLoading } = useQuery<any[]>({\n  queryKey: ['repository-contributors', repository?.full_name],\n  queryFn: async () => {\n    if (repository && repository.full_name && repository.full_name.includes(\"/\")) {\n      const [repoOwner, repoName] = repository.full_name.split(\"/\");\n      const response = await fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/contributors`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch contributors from GitHub');\n      }\n      return response.json();\n    } else {\n      throw new Error('Repository full_name not available');\n    }\n  },\n  enabled: !!repository && !!repository.full_name && repository.full_name.includes(\"/\"),\n  staleTime: 300_000,\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"client-side-filtering",children:"Client-Side Filtering"}),"\n",(0,s.jsx)(n.p,{children:"The application implements efficient client-side filtering for instant user feedback, combining Zustand state with computed values."}),"\n",(0,s.jsx)(n.h3,{id:"filtering-logic",children:"Filtering Logic"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// In RepositoriesPageClient component\nconst filteredRepositories = React.useMemo(() => {\n  if (!repositories) return [];\n  \n  let result = repositories;\n  \n  // Apply category filters\n  if (universitiesSelected.length > 0) {\n    result = result.filter(r => r.university && universitiesSelected.includes(r.university));\n  }\n  \n  if (languagesSelected.length > 0) {\n    result = result.filter(r => r.language && languagesSelected.includes(r.language));\n  }\n  \n  if (licensesSelected.length > 0) {\n    result = result.filter(r => r.license && licensesSelected.includes(r.license));\n  }\n  \n  if (ownersSelected.length > 0) {\n    result = result.filter(r => r.owner && ownersSelected.includes(r.owner));\n  }\n  \n  if (topicsSelected.length > 0) {\n    result = result.filter(r => r.topic_area_ai && topicsSelected.includes(r.topic_area_ai));\n  }\n  \n  // Apply fuzzy search\n  if (searchTerm.trim()) {\n    const fuzzy = fuzzysort.go(\n      searchTerm,\n      result,\n      { \n        keys: ["full_name", "description"], \n        threshold: -10000, \n        limit: 50 \n      }\n    );\n    result = fuzzy.map(r => r.obj);\n  }\n  \n  return result;\n}, [repositories, universitiesSelected, languagesSelected, licensesSelected, ownersSelected, topicsSelected, searchTerm]);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pagination-state",children:"Pagination State"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Pagination is managed with local component state\nconst [page, setPage] = React.useState(1);\nconst [pageSize, setPageSize] = React.useState(20);\n\n// Reset page when filters change\nReact.useEffect(() => {\n  setPage(1);\n}, [searchTerm, universitiesSelected, languagesSelected, licensesSelected, ownersSelected]);\n\n// Calculate pagination values\nconst totalItems = filteredRepositories.length;\nconst totalPages = Math.max(1, Math.ceil(totalItems / pageSize));\n\n// Get current page of results\nconst pagedRepositories = React.useMemo(() =>\n  filteredRepositories.slice((page - 1) * pageSize, page * pageSize),\n  [filteredRepositories, page, pageSize]\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"url-state-synchronization",children:"URL State Synchronization"}),"\n",(0,s.jsx)(n.p,{children:"The application synchronizes certain state with URL parameters for bookmarkable searches."}),"\n",(0,s.jsx)(n.h3,{id:"search-parameter-sync",children:"Search Parameter Sync"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// In RepositoriesPageClient component\nimport { useSearchParams } from 'next/navigation';\n\nconst searchParams = useSearchParams();\nconst setSearchTerm = useRepositoriesStore((state) => state.setSearchTerm);\n\n// Sync URL search param to store on mount\nuseEffect(() => {\n  const urlSearch = searchParams.get(\"search\");\n  if (urlSearch) {\n    setSearchTerm(urlSearch);\n  }\n}, [searchParams, setSearchTerm]);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"query-error-handling",children:"Query Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Repository list error handling\nconst { data: repositories, isLoading, error } = useQuery({\n  queryKey: ['repositories'],\n  queryFn: fetchRepositories,\n  retry: (failureCount, error) => {\n    // Don't retry on client errors\n    if (error instanceof Error && error.message.includes('4')) {\n      return false;\n    }\n    return failureCount < 3;\n  },\n});\n\n// Error state rendering\nif (error) {\n  return <RepositoryErrorState error={error} onRetry={() => refetch()} />;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"repository-detail-error-handling",children:"Repository Detail Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Special handling for 404 errors\nconst is404 = (\n  shouldFetch &&\n  isError &&\n  error &&\n  ((typeof error === "object" && error !== null && "code" in error && (error as any).code === 404) ||\n    error.message === "Repository not found")\n);\n\nif (is404 && isFetched) {\n  return (\n    <RepositoryErrorState error="Repository not found">\n      <div className="flex flex-col items-center gap-2 mt-4">\n        <Link href="/repositories" className="text-sky-700 underline">\n          Back to Repositories\n        </Link>\n      </div>\n    </RepositoryErrorState>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,s.jsx)(n.h3,{id:"memoization",children:"Memoization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Memoize expensive filtering operations\nconst filteredRepositories = React.useMemo(() => {\n  // Expensive filtering logic\n}, [repositories, ...filterDependencies]);\n\n// Memoize paginated results\nconst pagedRepositories = React.useMemo(() =>\n  filteredRepositories.slice((page - 1) * pageSize, page * pageSize),\n  [filteredRepositories, page, pageSize]\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"selective-re-renders",children:"Selective Re-renders"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Use selective subscriptions to prevent unnecessary re-renders\nconst searchTerm = useRepositoriesStore((state) => state.searchTerm);\n// Component only re-renders when searchTerm changes\n\n// Avoid subscribing to entire store\nconst { repositories, searchTerm } = useRepositoriesStore(); // \u274c Re-renders on any state change\n\n// Instead, use selective subscriptions\nconst repositories = useRepositoriesStore((state) => state.repositories); // \u2705 Only re-renders when repositories change\nconst searchTerm = useRepositoriesStore((state) => state.searchTerm); // \u2705 Only re-renders when searchTerm changes\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-optimization",children:"Query Optimization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Optimize query keys for proper caching\nconst { data: repository } = useQuery({\n  queryKey: ['repository', owner, repo], // \u2705 Specific cache key\n  queryFn: () => fetchRepository(owner, repo),\n});\n\n// Avoid dynamic query keys that prevent caching\nconst { data: repository } = useQuery({\n  queryKey: ['repository', Math.random()], // \u274c Never cached\n  queryFn: () => fetchRepository(owner, repo),\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"state-management-best-practices",children:"State Management Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-separation-of-concerns",children:"1. Separation of Concerns"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zustand"}),": Client state (filters, UI state, temporary data)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TanStack Query"}),": Server state (API data, caching, background updates)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local State"}),": Component-specific state (form inputs, local UI state)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-selective-subscriptions",children:"2. Selective Subscriptions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Only subscribe to needed state\nconst searchTerm = useRepositoriesStore((state) => state.searchTerm);\n\n// \u274c Bad - Subscribe to entire store\nconst store = useRepositoriesStore();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-proper-cache-keys",children:"3. Proper Cache Keys"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Good - Specific, stable cache keys\nqueryKey: ['repositories']\nqueryKey: ['repository', owner, repo]\nqueryKey: ['contributors', fullName]\n\n// \u274c Bad - Generic or unstable cache keys\nqueryKey: ['data']\nqueryKey: ['repository', Math.random()]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-error-boundaries",children:"4. Error Boundaries"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Wrap components in error boundaries for graceful error handling\n<ErrorBoundary fallback={<RepositoryErrorState />}>\n  <RepositoriesPageClient />\n</ErrorBoundary>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-loading-states",children:"5. Loading States"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Provide appropriate loading states for better UX\nif (isLoading) return <RepositoryLoadingGrid />;\nif (error) return <RepositoryErrorState error={error} />;\nreturn <RepositoryGrid repositories={repositories} />;\n"})}),"\n",(0,s.jsx)(n.p,{children:"This state management architecture provides a robust, performant, and maintainable foundation for the UC ORB Showcase application, ensuring smooth user interactions and efficient data handling."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);